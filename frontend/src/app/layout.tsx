import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { Provider } from 'react-redux';
import { store } from "@/types/store";
import { useSelector } from 'react-redux';
import { RootState } from '@/types/store';
import AuthModal from '@/components/AuthModal';

// Set up custom fonts
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// RootLayout component with Redux store and modal rendering logic
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {/* Wrap the entire application with the Redux Provider */}
        <Provider store={store}>
          {/* Conditionally render the AuthModal based on Redux state */}
          <AppContent>{children}</AppContent>
        </Provider>
      </body>
    </html>
  );
}

// Separate component to handle modal rendering
function AppContent({ children }: { children: React.ReactNode }) {
  const isModalOpen = useSelector((state: RootState) => state.authModal.isOpen);
  
  return (
    <>
      {children}
      {isModalOpen && <AuthModal />} {/* Conditionally render modal */}
    </>
  );
}
